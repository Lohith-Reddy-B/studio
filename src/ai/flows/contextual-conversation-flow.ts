'use server';
/**
 * @fileOverview A contextual conversation AI agent that generates new questions based on user answers and the initial image.
 *
 * - contextualConversation - A function that handles the contextual conversation process.
 * - ContextualConversationInput - The input type for the contextualConversation function.
 * - ContextualConversationOutput - The return type for the contextualConversation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ContextualConversationInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  previousAnswers: z.array(z.string()).optional().describe('The list of answers provided by user'),
  previousQuestions: z.array(z.string()).optional().describe('The list of questions asked by the bot'),
  initialResponse: z.string().optional().describe('The initial AI response to the image.'),
  newAnswer: z.string().optional().describe('The most recent answer provided by the user.'),
});
export type ContextualConversationInput = z.infer<typeof ContextualConversationInputSchema>;

const ContextualConversationOutputSchema = z.object({
  newQuestion: z.string().describe('The new question generated by the AI.'),
});
export type ContextualConversationOutput = z.infer<typeof ContextualConversationOutputSchema>;

export async function contextualConversation(input: ContextualConversationInput): Promise<ContextualConversationOutput> {
  return contextualConversationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'contextualConversationPrompt',
  input: {schema: ContextualConversationInputSchema},
  output: {schema: ContextualConversationOutputSchema},
  prompt: `You are an AI assistant designed to generate follow-up questions based on an image and the user's previous answers. The goal is to maintain a contextual conversation with the user about the image.

  Here's the image:
  {{media url=photoDataUri}}

  {% if initialResponse %}Initial AI Response: {{initialResponse}}{% endif %}

  {% if previousQuestions %}
  Previous Questions:
  {% each previousQuestions as |question| %}
  - {{question}}
  {% endeach %}
  {% endif %}

  {% if previousAnswers %}
  Previous Answers:
  {% each previousAnswers as |answer| %}
  - {{answer}}
  {% endeach %}
  {% endif %}

  {% if newAnswer %}
  The user just answered the last question you asked.  The answer was: {{newAnswer}}
  {% endif %}

  Generate a new question that builds upon the previous exchange and encourages further exploration of the image content. Focus on details, implications, or related aspects that haven't been covered yet.  The question should be open-ended and invite a thoughtful response.
  `,
});

const contextualConversationFlow = ai.defineFlow(
  {
    name: 'contextualConversationFlow',
    inputSchema: ContextualConversationInputSchema,
    outputSchema: ContextualConversationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
